// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coral/v1beta1/coral.proto

package coralv1beta1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1beta1 "ctx.sh/coral/pkg/gen/coral/v1beta1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CoralServiceName is the fully-qualified name of the CoralService service.
	CoralServiceName = "coral.v1beta1.CoralService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CoralServiceReporterProcedure is the fully-qualified name of the CoralService's Reporter RPC.
	CoralServiceReporterProcedure = "/coral.v1beta1.CoralService/Reporter"
)

// CoralServiceClient is a client for the coral.v1beta1.CoralService service.
type CoralServiceClient interface {
	Reporter(context.Context, *connect.Request[v1beta1.ReporterRequest]) (*connect.Response[v1beta1.ReporterResponse], error)
}

// NewCoralServiceClient constructs a client for the coral.v1beta1.CoralService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoralServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CoralServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	coralServiceMethods := v1beta1.File_coral_v1beta1_coral_proto.Services().ByName("CoralService").Methods()
	return &coralServiceClient{
		reporter: connect.NewClient[v1beta1.ReporterRequest, v1beta1.ReporterResponse](
			httpClient,
			baseURL+CoralServiceReporterProcedure,
			connect.WithSchema(coralServiceMethods.ByName("Reporter")),
			connect.WithClientOptions(opts...),
		),
	}
}

// coralServiceClient implements CoralServiceClient.
type coralServiceClient struct {
	reporter *connect.Client[v1beta1.ReporterRequest, v1beta1.ReporterResponse]
}

// Reporter calls coral.v1beta1.CoralService.Reporter.
func (c *coralServiceClient) Reporter(ctx context.Context, req *connect.Request[v1beta1.ReporterRequest]) (*connect.Response[v1beta1.ReporterResponse], error) {
	return c.reporter.CallUnary(ctx, req)
}

// CoralServiceHandler is an implementation of the coral.v1beta1.CoralService service.
type CoralServiceHandler interface {
	Reporter(context.Context, *connect.Request[v1beta1.ReporterRequest]) (*connect.Response[v1beta1.ReporterResponse], error)
}

// NewCoralServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoralServiceHandler(svc CoralServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	coralServiceMethods := v1beta1.File_coral_v1beta1_coral_proto.Services().ByName("CoralService").Methods()
	coralServiceReporterHandler := connect.NewUnaryHandler(
		CoralServiceReporterProcedure,
		svc.Reporter,
		connect.WithSchema(coralServiceMethods.ByName("Reporter")),
		connect.WithHandlerOptions(opts...),
	)
	return "/coral.v1beta1.CoralService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CoralServiceReporterProcedure:
			coralServiceReporterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCoralServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoralServiceHandler struct{}

func (UnimplementedCoralServiceHandler) Reporter(context.Context, *connect.Request[v1beta1.ReporterRequest]) (*connect.Response[v1beta1.ReporterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coral.v1beta1.CoralService.Reporter is not implemented"))
}
