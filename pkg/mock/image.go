// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"ctx.sh/coral/pkg/agent/image"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"k8s.io/cri-api/pkg/apis/runtime/v1"
)

// NewMockImageClient creates a new instance of MockImageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageClient {
	mock := &MockImageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageClient is an autogenerated mock type for the ImageClient type
type MockImageClient struct {
	mock.Mock
}

type MockImageClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageClient) EXPECT() *MockImageClient_Expecter {
	return &MockImageClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockImageClient
func (_mock *MockImageClient) Delete(ctx context.Context, uid string, name string) (image.Info, error) {
	ret := _mock.Called(ctx, uid, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 image.Info
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (image.Info, error)); ok {
		return returnFunc(ctx, uid, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) image.Info); ok {
		r0 = returnFunc(ctx, uid, name)
	} else {
		r0 = ret.Get(0).(image.Info)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockImageClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - uid
//   - name
func (_e *MockImageClient_Expecter) Delete(ctx interface{}, uid interface{}, name interface{}) *MockImageClient_Delete_Call {
	return &MockImageClient_Delete_Call{Call: _e.mock.On("Delete", ctx, uid, name)}
}

func (_c *MockImageClient_Delete_Call) Run(run func(ctx context.Context, uid string, name string)) *MockImageClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockImageClient_Delete_Call) Return(info image.Info, err error) *MockImageClient_Delete_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockImageClient_Delete_Call) RunAndReturn(run func(ctx context.Context, uid string, name string) (image.Info, error)) *MockImageClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function for the type MockImageClient
func (_mock *MockImageClient) Pull(ctx context.Context, uid string, name string, auth []*v1.AuthConfig) (image.Info, error) {
	ret := _mock.Called(ctx, uid, name, auth)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 image.Info
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []*v1.AuthConfig) (image.Info, error)); ok {
		return returnFunc(ctx, uid, name, auth)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []*v1.AuthConfig) image.Info); ok {
		r0 = returnFunc(ctx, uid, name, auth)
	} else {
		r0 = ret.Get(0).(image.Info)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []*v1.AuthConfig) error); ok {
		r1 = returnFunc(ctx, uid, name, auth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageClient_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockImageClient_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx
//   - uid
//   - name
//   - auth
func (_e *MockImageClient_Expecter) Pull(ctx interface{}, uid interface{}, name interface{}, auth interface{}) *MockImageClient_Pull_Call {
	return &MockImageClient_Pull_Call{Call: _e.mock.On("Pull", ctx, uid, name, auth)}
}

func (_c *MockImageClient_Pull_Call) Run(run func(ctx context.Context, uid string, name string, auth []*v1.AuthConfig)) *MockImageClient_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*v1.AuthConfig))
	})
	return _c
}

func (_c *MockImageClient_Pull_Call) Return(info image.Info, err error) *MockImageClient_Pull_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockImageClient_Pull_Call) RunAndReturn(run func(ctx context.Context, uid string, name string, auth []*v1.AuthConfig) (image.Info, error)) *MockImageClient_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockImageClient
func (_mock *MockImageClient) Status(ctx context.Context, name string) (image.Info, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 image.Info
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (image.Info, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) image.Info); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(image.Info)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockImageClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockImageClient_Expecter) Status(ctx interface{}, name interface{}) *MockImageClient_Status_Call {
	return &MockImageClient_Status_Call{Call: _e.mock.On("Status", ctx, name)}
}

func (_c *MockImageClient_Status_Call) Run(run func(ctx context.Context, name string)) *MockImageClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageClient_Status_Call) Return(info image.Info, err error) *MockImageClient_Status_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockImageClient_Status_Call) RunAndReturn(run func(ctx context.Context, name string) (image.Info, error)) *MockImageClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageServiceClient creates a new instance of MockImageServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageServiceClient {
	mock := &MockImageServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageServiceClient is an autogenerated mock type for the ImageServiceClient type
type MockImageServiceClient struct {
	mock.Mock
}

type MockImageServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageServiceClient) EXPECT() *MockImageServiceClient_Expecter {
	return &MockImageServiceClient_Expecter{mock: &_m.Mock}
}

// ImageFsInfo provides a mock function for the type MockImageServiceClient
func (_mock *MockImageServiceClient) ImageFsInfo(ctx context.Context, in *v1.ImageFsInfoRequest, opts ...grpc.CallOption) (*v1.ImageFsInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ImageFsInfo")
	}

	var r0 *v1.ImageFsInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ImageFsInfoRequest, ...grpc.CallOption) (*v1.ImageFsInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ImageFsInfoRequest, ...grpc.CallOption) *v1.ImageFsInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ImageFsInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ImageFsInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageServiceClient_ImageFsInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageFsInfo'
type MockImageServiceClient_ImageFsInfo_Call struct {
	*mock.Call
}

// ImageFsInfo is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockImageServiceClient_Expecter) ImageFsInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockImageServiceClient_ImageFsInfo_Call {
	return &MockImageServiceClient_ImageFsInfo_Call{Call: _e.mock.On("ImageFsInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageServiceClient_ImageFsInfo_Call) Run(run func(ctx context.Context, in *v1.ImageFsInfoRequest, opts ...grpc.CallOption)) *MockImageServiceClient_ImageFsInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ImageFsInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockImageServiceClient_ImageFsInfo_Call) Return(imageFsInfoResponse *v1.ImageFsInfoResponse, err error) *MockImageServiceClient_ImageFsInfo_Call {
	_c.Call.Return(imageFsInfoResponse, err)
	return _c
}

func (_c *MockImageServiceClient_ImageFsInfo_Call) RunAndReturn(run func(ctx context.Context, in *v1.ImageFsInfoRequest, opts ...grpc.CallOption) (*v1.ImageFsInfoResponse, error)) *MockImageServiceClient_ImageFsInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ImageStatus provides a mock function for the type MockImageServiceClient
func (_mock *MockImageServiceClient) ImageStatus(ctx context.Context, in *v1.ImageStatusRequest, opts ...grpc.CallOption) (*v1.ImageStatusResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ImageStatus")
	}

	var r0 *v1.ImageStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ImageStatusRequest, ...grpc.CallOption) (*v1.ImageStatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ImageStatusRequest, ...grpc.CallOption) *v1.ImageStatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ImageStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ImageStatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageServiceClient_ImageStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageStatus'
type MockImageServiceClient_ImageStatus_Call struct {
	*mock.Call
}

// ImageStatus is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockImageServiceClient_Expecter) ImageStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockImageServiceClient_ImageStatus_Call {
	return &MockImageServiceClient_ImageStatus_Call{Call: _e.mock.On("ImageStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageServiceClient_ImageStatus_Call) Run(run func(ctx context.Context, in *v1.ImageStatusRequest, opts ...grpc.CallOption)) *MockImageServiceClient_ImageStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ImageStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockImageServiceClient_ImageStatus_Call) Return(imageStatusResponse *v1.ImageStatusResponse, err error) *MockImageServiceClient_ImageStatus_Call {
	_c.Call.Return(imageStatusResponse, err)
	return _c
}

func (_c *MockImageServiceClient_ImageStatus_Call) RunAndReturn(run func(ctx context.Context, in *v1.ImageStatusRequest, opts ...grpc.CallOption) (*v1.ImageStatusResponse, error)) *MockImageServiceClient_ImageStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListImages provides a mock function for the type MockImageServiceClient
func (_mock *MockImageServiceClient) ListImages(ctx context.Context, in *v1.ListImagesRequest, opts ...grpc.CallOption) (*v1.ListImagesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 *v1.ListImagesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListImagesRequest, ...grpc.CallOption) (*v1.ListImagesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListImagesRequest, ...grpc.CallOption) *v1.ListImagesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListImagesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListImagesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageServiceClient_ListImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImages'
type MockImageServiceClient_ListImages_Call struct {
	*mock.Call
}

// ListImages is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockImageServiceClient_Expecter) ListImages(ctx interface{}, in interface{}, opts ...interface{}) *MockImageServiceClient_ListImages_Call {
	return &MockImageServiceClient_ListImages_Call{Call: _e.mock.On("ListImages",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageServiceClient_ListImages_Call) Run(run func(ctx context.Context, in *v1.ListImagesRequest, opts ...grpc.CallOption)) *MockImageServiceClient_ListImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListImagesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockImageServiceClient_ListImages_Call) Return(listImagesResponse *v1.ListImagesResponse, err error) *MockImageServiceClient_ListImages_Call {
	_c.Call.Return(listImagesResponse, err)
	return _c
}

func (_c *MockImageServiceClient_ListImages_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListImagesRequest, opts ...grpc.CallOption) (*v1.ListImagesResponse, error)) *MockImageServiceClient_ListImages_Call {
	_c.Call.Return(run)
	return _c
}

// PullImage provides a mock function for the type MockImageServiceClient
func (_mock *MockImageServiceClient) PullImage(ctx context.Context, in *v1.PullImageRequest, opts ...grpc.CallOption) (*v1.PullImageResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PullImage")
	}

	var r0 *v1.PullImageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PullImageRequest, ...grpc.CallOption) (*v1.PullImageResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PullImageRequest, ...grpc.CallOption) *v1.PullImageResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PullImageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.PullImageRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageServiceClient_PullImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullImage'
type MockImageServiceClient_PullImage_Call struct {
	*mock.Call
}

// PullImage is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockImageServiceClient_Expecter) PullImage(ctx interface{}, in interface{}, opts ...interface{}) *MockImageServiceClient_PullImage_Call {
	return &MockImageServiceClient_PullImage_Call{Call: _e.mock.On("PullImage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageServiceClient_PullImage_Call) Run(run func(ctx context.Context, in *v1.PullImageRequest, opts ...grpc.CallOption)) *MockImageServiceClient_PullImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.PullImageRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockImageServiceClient_PullImage_Call) Return(pullImageResponse *v1.PullImageResponse, err error) *MockImageServiceClient_PullImage_Call {
	_c.Call.Return(pullImageResponse, err)
	return _c
}

func (_c *MockImageServiceClient_PullImage_Call) RunAndReturn(run func(ctx context.Context, in *v1.PullImageRequest, opts ...grpc.CallOption) (*v1.PullImageResponse, error)) *MockImageServiceClient_PullImage_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveImage provides a mock function for the type MockImageServiceClient
func (_mock *MockImageServiceClient) RemoveImage(ctx context.Context, in *v1.RemoveImageRequest, opts ...grpc.CallOption) (*v1.RemoveImageResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveImage")
	}

	var r0 *v1.RemoveImageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemoveImageRequest, ...grpc.CallOption) (*v1.RemoveImageResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemoveImageRequest, ...grpc.CallOption) *v1.RemoveImageResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RemoveImageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RemoveImageRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageServiceClient_RemoveImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveImage'
type MockImageServiceClient_RemoveImage_Call struct {
	*mock.Call
}

// RemoveImage is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockImageServiceClient_Expecter) RemoveImage(ctx interface{}, in interface{}, opts ...interface{}) *MockImageServiceClient_RemoveImage_Call {
	return &MockImageServiceClient_RemoveImage_Call{Call: _e.mock.On("RemoveImage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageServiceClient_RemoveImage_Call) Run(run func(ctx context.Context, in *v1.RemoveImageRequest, opts ...grpc.CallOption)) *MockImageServiceClient_RemoveImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.RemoveImageRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockImageServiceClient_RemoveImage_Call) Return(removeImageResponse *v1.RemoveImageResponse, err error) *MockImageServiceClient_RemoveImage_Call {
	_c.Call.Return(removeImageResponse, err)
	return _c
}

func (_c *MockImageServiceClient_RemoveImage_Call) RunAndReturn(run func(ctx context.Context, in *v1.RemoveImageRequest, opts ...grpc.CallOption) (*v1.RemoveImageResponse, error)) *MockImageServiceClient_RemoveImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuntimeServiceClient creates a new instance of MockRuntimeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntimeServiceClient {
	mock := &MockRuntimeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRuntimeServiceClient is an autogenerated mock type for the RuntimeServiceClient type
type MockRuntimeServiceClient struct {
	mock.Mock
}

type MockRuntimeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntimeServiceClient) EXPECT() *MockRuntimeServiceClient_Expecter {
	return &MockRuntimeServiceClient_Expecter{mock: &_m.Mock}
}

// Attach provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) Attach(ctx context.Context, in *v1.AttachRequest, opts ...grpc.CallOption) (*v1.AttachResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Attach")
	}

	var r0 *v1.AttachResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.AttachRequest, ...grpc.CallOption) (*v1.AttachResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.AttachRequest, ...grpc.CallOption) *v1.AttachResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AttachResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.AttachRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_Attach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attach'
type MockRuntimeServiceClient_Attach_Call struct {
	*mock.Call
}

// Attach is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) Attach(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_Attach_Call {
	return &MockRuntimeServiceClient_Attach_Call{Call: _e.mock.On("Attach",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_Attach_Call) Run(run func(ctx context.Context, in *v1.AttachRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_Attach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.AttachRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_Attach_Call) Return(attachResponse *v1.AttachResponse, err error) *MockRuntimeServiceClient_Attach_Call {
	_c.Call.Return(attachResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_Attach_Call) RunAndReturn(run func(ctx context.Context, in *v1.AttachRequest, opts ...grpc.CallOption) (*v1.AttachResponse, error)) *MockRuntimeServiceClient_Attach_Call {
	_c.Call.Return(run)
	return _c
}

// CheckpointContainer provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) CheckpointContainer(ctx context.Context, in *v1.CheckpointContainerRequest, opts ...grpc.CallOption) (*v1.CheckpointContainerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CheckpointContainer")
	}

	var r0 *v1.CheckpointContainerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CheckpointContainerRequest, ...grpc.CallOption) (*v1.CheckpointContainerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CheckpointContainerRequest, ...grpc.CallOption) *v1.CheckpointContainerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CheckpointContainerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CheckpointContainerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_CheckpointContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckpointContainer'
type MockRuntimeServiceClient_CheckpointContainer_Call struct {
	*mock.Call
}

// CheckpointContainer is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) CheckpointContainer(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_CheckpointContainer_Call {
	return &MockRuntimeServiceClient_CheckpointContainer_Call{Call: _e.mock.On("CheckpointContainer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_CheckpointContainer_Call) Run(run func(ctx context.Context, in *v1.CheckpointContainerRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_CheckpointContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.CheckpointContainerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_CheckpointContainer_Call) Return(checkpointContainerResponse *v1.CheckpointContainerResponse, err error) *MockRuntimeServiceClient_CheckpointContainer_Call {
	_c.Call.Return(checkpointContainerResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_CheckpointContainer_Call) RunAndReturn(run func(ctx context.Context, in *v1.CheckpointContainerRequest, opts ...grpc.CallOption) (*v1.CheckpointContainerResponse, error)) *MockRuntimeServiceClient_CheckpointContainer_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStats provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ContainerStats(ctx context.Context, in *v1.ContainerStatsRequest, opts ...grpc.CallOption) (*v1.ContainerStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ContainerStats")
	}

	var r0 *v1.ContainerStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ContainerStatsRequest, ...grpc.CallOption) (*v1.ContainerStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ContainerStatsRequest, ...grpc.CallOption) *v1.ContainerStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ContainerStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ContainerStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ContainerStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStats'
type MockRuntimeServiceClient_ContainerStats_Call struct {
	*mock.Call
}

// ContainerStats is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ContainerStats(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ContainerStats_Call {
	return &MockRuntimeServiceClient_ContainerStats_Call{Call: _e.mock.On("ContainerStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ContainerStats_Call) Run(run func(ctx context.Context, in *v1.ContainerStatsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ContainerStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ContainerStatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ContainerStats_Call) Return(containerStatsResponse *v1.ContainerStatsResponse, err error) *MockRuntimeServiceClient_ContainerStats_Call {
	_c.Call.Return(containerStatsResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ContainerStats_Call) RunAndReturn(run func(ctx context.Context, in *v1.ContainerStatsRequest, opts ...grpc.CallOption) (*v1.ContainerStatsResponse, error)) *MockRuntimeServiceClient_ContainerStats_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStatus provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ContainerStatus(ctx context.Context, in *v1.ContainerStatusRequest, opts ...grpc.CallOption) (*v1.ContainerStatusResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ContainerStatus")
	}

	var r0 *v1.ContainerStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ContainerStatusRequest, ...grpc.CallOption) (*v1.ContainerStatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ContainerStatusRequest, ...grpc.CallOption) *v1.ContainerStatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ContainerStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ContainerStatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ContainerStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStatus'
type MockRuntimeServiceClient_ContainerStatus_Call struct {
	*mock.Call
}

// ContainerStatus is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ContainerStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ContainerStatus_Call {
	return &MockRuntimeServiceClient_ContainerStatus_Call{Call: _e.mock.On("ContainerStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ContainerStatus_Call) Run(run func(ctx context.Context, in *v1.ContainerStatusRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ContainerStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ContainerStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ContainerStatus_Call) Return(containerStatusResponse *v1.ContainerStatusResponse, err error) *MockRuntimeServiceClient_ContainerStatus_Call {
	_c.Call.Return(containerStatusResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ContainerStatus_Call) RunAndReturn(run func(ctx context.Context, in *v1.ContainerStatusRequest, opts ...grpc.CallOption) (*v1.ContainerStatusResponse, error)) *MockRuntimeServiceClient_ContainerStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContainer provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) CreateContainer(ctx context.Context, in *v1.CreateContainerRequest, opts ...grpc.CallOption) (*v1.CreateContainerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateContainer")
	}

	var r0 *v1.CreateContainerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CreateContainerRequest, ...grpc.CallOption) (*v1.CreateContainerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CreateContainerRequest, ...grpc.CallOption) *v1.CreateContainerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateContainerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CreateContainerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_CreateContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContainer'
type MockRuntimeServiceClient_CreateContainer_Call struct {
	*mock.Call
}

// CreateContainer is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) CreateContainer(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_CreateContainer_Call {
	return &MockRuntimeServiceClient_CreateContainer_Call{Call: _e.mock.On("CreateContainer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_CreateContainer_Call) Run(run func(ctx context.Context, in *v1.CreateContainerRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_CreateContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.CreateContainerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_CreateContainer_Call) Return(createContainerResponse *v1.CreateContainerResponse, err error) *MockRuntimeServiceClient_CreateContainer_Call {
	_c.Call.Return(createContainerResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_CreateContainer_Call) RunAndReturn(run func(ctx context.Context, in *v1.CreateContainerRequest, opts ...grpc.CallOption) (*v1.CreateContainerResponse, error)) *MockRuntimeServiceClient_CreateContainer_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) Exec(ctx context.Context, in *v1.ExecRequest, opts ...grpc.CallOption) (*v1.ExecResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *v1.ExecResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (*v1.ExecResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) *v1.ExecResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ExecResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockRuntimeServiceClient_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) Exec(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_Exec_Call {
	return &MockRuntimeServiceClient_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_Exec_Call) Run(run func(ctx context.Context, in *v1.ExecRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ExecRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_Exec_Call) Return(execResponse *v1.ExecResponse, err error) *MockRuntimeServiceClient_Exec_Call {
	_c.Call.Return(execResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_Exec_Call) RunAndReturn(run func(ctx context.Context, in *v1.ExecRequest, opts ...grpc.CallOption) (*v1.ExecResponse, error)) *MockRuntimeServiceClient_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// ExecSync provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ExecSync(ctx context.Context, in *v1.ExecSyncRequest, opts ...grpc.CallOption) (*v1.ExecSyncResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecSync")
	}

	var r0 *v1.ExecSyncResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ExecSyncRequest, ...grpc.CallOption) (*v1.ExecSyncResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ExecSyncRequest, ...grpc.CallOption) *v1.ExecSyncResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ExecSyncResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ExecSyncRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ExecSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecSync'
type MockRuntimeServiceClient_ExecSync_Call struct {
	*mock.Call
}

// ExecSync is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ExecSync(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ExecSync_Call {
	return &MockRuntimeServiceClient_ExecSync_Call{Call: _e.mock.On("ExecSync",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ExecSync_Call) Run(run func(ctx context.Context, in *v1.ExecSyncRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ExecSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ExecSyncRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ExecSync_Call) Return(execSyncResponse *v1.ExecSyncResponse, err error) *MockRuntimeServiceClient_ExecSync_Call {
	_c.Call.Return(execSyncResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ExecSync_Call) RunAndReturn(run func(ctx context.Context, in *v1.ExecSyncRequest, opts ...grpc.CallOption) (*v1.ExecSyncResponse, error)) *MockRuntimeServiceClient_ExecSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainerEvents provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) GetContainerEvents(ctx context.Context, in *v1.GetEventsRequest, opts ...grpc.CallOption) (v1.RuntimeService_GetContainerEventsClient, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContainerEvents")
	}

	var r0 v1.RuntimeService_GetContainerEventsClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetEventsRequest, ...grpc.CallOption) (v1.RuntimeService_GetContainerEventsClient, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetEventsRequest, ...grpc.CallOption) v1.RuntimeService_GetContainerEventsClient); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.RuntimeService_GetContainerEventsClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetEventsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_GetContainerEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerEvents'
type MockRuntimeServiceClient_GetContainerEvents_Call struct {
	*mock.Call
}

// GetContainerEvents is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) GetContainerEvents(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_GetContainerEvents_Call {
	return &MockRuntimeServiceClient_GetContainerEvents_Call{Call: _e.mock.On("GetContainerEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_GetContainerEvents_Call) Run(run func(ctx context.Context, in *v1.GetEventsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_GetContainerEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.GetEventsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_GetContainerEvents_Call) Return(runtimeService_GetContainerEventsClient v1.RuntimeService_GetContainerEventsClient, err error) *MockRuntimeServiceClient_GetContainerEvents_Call {
	_c.Call.Return(runtimeService_GetContainerEventsClient, err)
	return _c
}

func (_c *MockRuntimeServiceClient_GetContainerEvents_Call) RunAndReturn(run func(ctx context.Context, in *v1.GetEventsRequest, opts ...grpc.CallOption) (v1.RuntimeService_GetContainerEventsClient, error)) *MockRuntimeServiceClient_GetContainerEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainerStats provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ListContainerStats(ctx context.Context, in *v1.ListContainerStatsRequest, opts ...grpc.CallOption) (*v1.ListContainerStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListContainerStats")
	}

	var r0 *v1.ListContainerStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListContainerStatsRequest, ...grpc.CallOption) (*v1.ListContainerStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListContainerStatsRequest, ...grpc.CallOption) *v1.ListContainerStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListContainerStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListContainerStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ListContainerStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainerStats'
type MockRuntimeServiceClient_ListContainerStats_Call struct {
	*mock.Call
}

// ListContainerStats is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ListContainerStats(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ListContainerStats_Call {
	return &MockRuntimeServiceClient_ListContainerStats_Call{Call: _e.mock.On("ListContainerStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ListContainerStats_Call) Run(run func(ctx context.Context, in *v1.ListContainerStatsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ListContainerStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListContainerStatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ListContainerStats_Call) Return(listContainerStatsResponse *v1.ListContainerStatsResponse, err error) *MockRuntimeServiceClient_ListContainerStats_Call {
	_c.Call.Return(listContainerStatsResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ListContainerStats_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListContainerStatsRequest, opts ...grpc.CallOption) (*v1.ListContainerStatsResponse, error)) *MockRuntimeServiceClient_ListContainerStats_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainers provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ListContainers(ctx context.Context, in *v1.ListContainersRequest, opts ...grpc.CallOption) (*v1.ListContainersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListContainers")
	}

	var r0 *v1.ListContainersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListContainersRequest, ...grpc.CallOption) (*v1.ListContainersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListContainersRequest, ...grpc.CallOption) *v1.ListContainersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListContainersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListContainersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ListContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainers'
type MockRuntimeServiceClient_ListContainers_Call struct {
	*mock.Call
}

// ListContainers is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ListContainers(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ListContainers_Call {
	return &MockRuntimeServiceClient_ListContainers_Call{Call: _e.mock.On("ListContainers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ListContainers_Call) Run(run func(ctx context.Context, in *v1.ListContainersRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ListContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListContainersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ListContainers_Call) Return(listContainersResponse *v1.ListContainersResponse, err error) *MockRuntimeServiceClient_ListContainers_Call {
	_c.Call.Return(listContainersResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ListContainers_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListContainersRequest, opts ...grpc.CallOption) (*v1.ListContainersResponse, error)) *MockRuntimeServiceClient_ListContainers_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetricDescriptors provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ListMetricDescriptors(ctx context.Context, in *v1.ListMetricDescriptorsRequest, opts ...grpc.CallOption) (*v1.ListMetricDescriptorsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListMetricDescriptors")
	}

	var r0 *v1.ListMetricDescriptorsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListMetricDescriptorsRequest, ...grpc.CallOption) (*v1.ListMetricDescriptorsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListMetricDescriptorsRequest, ...grpc.CallOption) *v1.ListMetricDescriptorsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListMetricDescriptorsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListMetricDescriptorsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ListMetricDescriptors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetricDescriptors'
type MockRuntimeServiceClient_ListMetricDescriptors_Call struct {
	*mock.Call
}

// ListMetricDescriptors is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ListMetricDescriptors(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ListMetricDescriptors_Call {
	return &MockRuntimeServiceClient_ListMetricDescriptors_Call{Call: _e.mock.On("ListMetricDescriptors",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ListMetricDescriptors_Call) Run(run func(ctx context.Context, in *v1.ListMetricDescriptorsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ListMetricDescriptors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListMetricDescriptorsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ListMetricDescriptors_Call) Return(listMetricDescriptorsResponse *v1.ListMetricDescriptorsResponse, err error) *MockRuntimeServiceClient_ListMetricDescriptors_Call {
	_c.Call.Return(listMetricDescriptorsResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ListMetricDescriptors_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListMetricDescriptorsRequest, opts ...grpc.CallOption) (*v1.ListMetricDescriptorsResponse, error)) *MockRuntimeServiceClient_ListMetricDescriptors_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodSandbox provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ListPodSandbox(ctx context.Context, in *v1.ListPodSandboxRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPodSandbox")
	}

	var r0 *v1.ListPodSandboxResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListPodSandboxRequest, ...grpc.CallOption) (*v1.ListPodSandboxResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListPodSandboxRequest, ...grpc.CallOption) *v1.ListPodSandboxResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListPodSandboxResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListPodSandboxRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ListPodSandbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodSandbox'
type MockRuntimeServiceClient_ListPodSandbox_Call struct {
	*mock.Call
}

// ListPodSandbox is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ListPodSandbox(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ListPodSandbox_Call {
	return &MockRuntimeServiceClient_ListPodSandbox_Call{Call: _e.mock.On("ListPodSandbox",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ListPodSandbox_Call) Run(run func(ctx context.Context, in *v1.ListPodSandboxRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ListPodSandbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListPodSandboxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ListPodSandbox_Call) Return(listPodSandboxResponse *v1.ListPodSandboxResponse, err error) *MockRuntimeServiceClient_ListPodSandbox_Call {
	_c.Call.Return(listPodSandboxResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ListPodSandbox_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListPodSandboxRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxResponse, error)) *MockRuntimeServiceClient_ListPodSandbox_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodSandboxMetrics provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ListPodSandboxMetrics(ctx context.Context, in *v1.ListPodSandboxMetricsRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPodSandboxMetrics")
	}

	var r0 *v1.ListPodSandboxMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListPodSandboxMetricsRequest, ...grpc.CallOption) (*v1.ListPodSandboxMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListPodSandboxMetricsRequest, ...grpc.CallOption) *v1.ListPodSandboxMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListPodSandboxMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListPodSandboxMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ListPodSandboxMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodSandboxMetrics'
type MockRuntimeServiceClient_ListPodSandboxMetrics_Call struct {
	*mock.Call
}

// ListPodSandboxMetrics is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ListPodSandboxMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ListPodSandboxMetrics_Call {
	return &MockRuntimeServiceClient_ListPodSandboxMetrics_Call{Call: _e.mock.On("ListPodSandboxMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ListPodSandboxMetrics_Call) Run(run func(ctx context.Context, in *v1.ListPodSandboxMetricsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ListPodSandboxMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListPodSandboxMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ListPodSandboxMetrics_Call) Return(listPodSandboxMetricsResponse *v1.ListPodSandboxMetricsResponse, err error) *MockRuntimeServiceClient_ListPodSandboxMetrics_Call {
	_c.Call.Return(listPodSandboxMetricsResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ListPodSandboxMetrics_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListPodSandboxMetricsRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxMetricsResponse, error)) *MockRuntimeServiceClient_ListPodSandboxMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodSandboxStats provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ListPodSandboxStats(ctx context.Context, in *v1.ListPodSandboxStatsRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPodSandboxStats")
	}

	var r0 *v1.ListPodSandboxStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListPodSandboxStatsRequest, ...grpc.CallOption) (*v1.ListPodSandboxStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListPodSandboxStatsRequest, ...grpc.CallOption) *v1.ListPodSandboxStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListPodSandboxStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListPodSandboxStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ListPodSandboxStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodSandboxStats'
type MockRuntimeServiceClient_ListPodSandboxStats_Call struct {
	*mock.Call
}

// ListPodSandboxStats is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ListPodSandboxStats(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ListPodSandboxStats_Call {
	return &MockRuntimeServiceClient_ListPodSandboxStats_Call{Call: _e.mock.On("ListPodSandboxStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ListPodSandboxStats_Call) Run(run func(ctx context.Context, in *v1.ListPodSandboxStatsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ListPodSandboxStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ListPodSandboxStatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ListPodSandboxStats_Call) Return(listPodSandboxStatsResponse *v1.ListPodSandboxStatsResponse, err error) *MockRuntimeServiceClient_ListPodSandboxStats_Call {
	_c.Call.Return(listPodSandboxStatsResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ListPodSandboxStats_Call) RunAndReturn(run func(ctx context.Context, in *v1.ListPodSandboxStatsRequest, opts ...grpc.CallOption) (*v1.ListPodSandboxStatsResponse, error)) *MockRuntimeServiceClient_ListPodSandboxStats_Call {
	_c.Call.Return(run)
	return _c
}

// PodSandboxStats provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) PodSandboxStats(ctx context.Context, in *v1.PodSandboxStatsRequest, opts ...grpc.CallOption) (*v1.PodSandboxStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PodSandboxStats")
	}

	var r0 *v1.PodSandboxStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodSandboxStatsRequest, ...grpc.CallOption) (*v1.PodSandboxStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodSandboxStatsRequest, ...grpc.CallOption) *v1.PodSandboxStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodSandboxStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.PodSandboxStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_PodSandboxStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PodSandboxStats'
type MockRuntimeServiceClient_PodSandboxStats_Call struct {
	*mock.Call
}

// PodSandboxStats is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) PodSandboxStats(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_PodSandboxStats_Call {
	return &MockRuntimeServiceClient_PodSandboxStats_Call{Call: _e.mock.On("PodSandboxStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_PodSandboxStats_Call) Run(run func(ctx context.Context, in *v1.PodSandboxStatsRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_PodSandboxStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.PodSandboxStatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_PodSandboxStats_Call) Return(podSandboxStatsResponse *v1.PodSandboxStatsResponse, err error) *MockRuntimeServiceClient_PodSandboxStats_Call {
	_c.Call.Return(podSandboxStatsResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_PodSandboxStats_Call) RunAndReturn(run func(ctx context.Context, in *v1.PodSandboxStatsRequest, opts ...grpc.CallOption) (*v1.PodSandboxStatsResponse, error)) *MockRuntimeServiceClient_PodSandboxStats_Call {
	_c.Call.Return(run)
	return _c
}

// PodSandboxStatus provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) PodSandboxStatus(ctx context.Context, in *v1.PodSandboxStatusRequest, opts ...grpc.CallOption) (*v1.PodSandboxStatusResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PodSandboxStatus")
	}

	var r0 *v1.PodSandboxStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodSandboxStatusRequest, ...grpc.CallOption) (*v1.PodSandboxStatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PodSandboxStatusRequest, ...grpc.CallOption) *v1.PodSandboxStatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodSandboxStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.PodSandboxStatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_PodSandboxStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PodSandboxStatus'
type MockRuntimeServiceClient_PodSandboxStatus_Call struct {
	*mock.Call
}

// PodSandboxStatus is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) PodSandboxStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_PodSandboxStatus_Call {
	return &MockRuntimeServiceClient_PodSandboxStatus_Call{Call: _e.mock.On("PodSandboxStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_PodSandboxStatus_Call) Run(run func(ctx context.Context, in *v1.PodSandboxStatusRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_PodSandboxStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.PodSandboxStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_PodSandboxStatus_Call) Return(podSandboxStatusResponse *v1.PodSandboxStatusResponse, err error) *MockRuntimeServiceClient_PodSandboxStatus_Call {
	_c.Call.Return(podSandboxStatusResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_PodSandboxStatus_Call) RunAndReturn(run func(ctx context.Context, in *v1.PodSandboxStatusRequest, opts ...grpc.CallOption) (*v1.PodSandboxStatusResponse, error)) *MockRuntimeServiceClient_PodSandboxStatus_Call {
	_c.Call.Return(run)
	return _c
}

// PortForward provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) PortForward(ctx context.Context, in *v1.PortForwardRequest, opts ...grpc.CallOption) (*v1.PortForwardResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PortForward")
	}

	var r0 *v1.PortForwardResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PortForwardRequest, ...grpc.CallOption) (*v1.PortForwardResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.PortForwardRequest, ...grpc.CallOption) *v1.PortForwardResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PortForwardResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.PortForwardRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_PortForward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PortForward'
type MockRuntimeServiceClient_PortForward_Call struct {
	*mock.Call
}

// PortForward is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) PortForward(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_PortForward_Call {
	return &MockRuntimeServiceClient_PortForward_Call{Call: _e.mock.On("PortForward",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_PortForward_Call) Run(run func(ctx context.Context, in *v1.PortForwardRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_PortForward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.PortForwardRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_PortForward_Call) Return(portForwardResponse *v1.PortForwardResponse, err error) *MockRuntimeServiceClient_PortForward_Call {
	_c.Call.Return(portForwardResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_PortForward_Call) RunAndReturn(run func(ctx context.Context, in *v1.PortForwardRequest, opts ...grpc.CallOption) (*v1.PortForwardResponse, error)) *MockRuntimeServiceClient_PortForward_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContainer provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) RemoveContainer(ctx context.Context, in *v1.RemoveContainerRequest, opts ...grpc.CallOption) (*v1.RemoveContainerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveContainer")
	}

	var r0 *v1.RemoveContainerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemoveContainerRequest, ...grpc.CallOption) (*v1.RemoveContainerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemoveContainerRequest, ...grpc.CallOption) *v1.RemoveContainerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RemoveContainerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RemoveContainerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_RemoveContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContainer'
type MockRuntimeServiceClient_RemoveContainer_Call struct {
	*mock.Call
}

// RemoveContainer is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) RemoveContainer(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_RemoveContainer_Call {
	return &MockRuntimeServiceClient_RemoveContainer_Call{Call: _e.mock.On("RemoveContainer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_RemoveContainer_Call) Run(run func(ctx context.Context, in *v1.RemoveContainerRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_RemoveContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.RemoveContainerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_RemoveContainer_Call) Return(removeContainerResponse *v1.RemoveContainerResponse, err error) *MockRuntimeServiceClient_RemoveContainer_Call {
	_c.Call.Return(removeContainerResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_RemoveContainer_Call) RunAndReturn(run func(ctx context.Context, in *v1.RemoveContainerRequest, opts ...grpc.CallOption) (*v1.RemoveContainerResponse, error)) *MockRuntimeServiceClient_RemoveContainer_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePodSandbox provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) RemovePodSandbox(ctx context.Context, in *v1.RemovePodSandboxRequest, opts ...grpc.CallOption) (*v1.RemovePodSandboxResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemovePodSandbox")
	}

	var r0 *v1.RemovePodSandboxResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemovePodSandboxRequest, ...grpc.CallOption) (*v1.RemovePodSandboxResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RemovePodSandboxRequest, ...grpc.CallOption) *v1.RemovePodSandboxResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RemovePodSandboxResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RemovePodSandboxRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_RemovePodSandbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePodSandbox'
type MockRuntimeServiceClient_RemovePodSandbox_Call struct {
	*mock.Call
}

// RemovePodSandbox is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) RemovePodSandbox(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_RemovePodSandbox_Call {
	return &MockRuntimeServiceClient_RemovePodSandbox_Call{Call: _e.mock.On("RemovePodSandbox",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_RemovePodSandbox_Call) Run(run func(ctx context.Context, in *v1.RemovePodSandboxRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_RemovePodSandbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.RemovePodSandboxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_RemovePodSandbox_Call) Return(removePodSandboxResponse *v1.RemovePodSandboxResponse, err error) *MockRuntimeServiceClient_RemovePodSandbox_Call {
	_c.Call.Return(removePodSandboxResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_RemovePodSandbox_Call) RunAndReturn(run func(ctx context.Context, in *v1.RemovePodSandboxRequest, opts ...grpc.CallOption) (*v1.RemovePodSandboxResponse, error)) *MockRuntimeServiceClient_RemovePodSandbox_Call {
	_c.Call.Return(run)
	return _c
}

// ReopenContainerLog provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) ReopenContainerLog(ctx context.Context, in *v1.ReopenContainerLogRequest, opts ...grpc.CallOption) (*v1.ReopenContainerLogResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ReopenContainerLog")
	}

	var r0 *v1.ReopenContainerLogResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ReopenContainerLogRequest, ...grpc.CallOption) (*v1.ReopenContainerLogResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ReopenContainerLogRequest, ...grpc.CallOption) *v1.ReopenContainerLogResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ReopenContainerLogResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ReopenContainerLogRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_ReopenContainerLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReopenContainerLog'
type MockRuntimeServiceClient_ReopenContainerLog_Call struct {
	*mock.Call
}

// ReopenContainerLog is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) ReopenContainerLog(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_ReopenContainerLog_Call {
	return &MockRuntimeServiceClient_ReopenContainerLog_Call{Call: _e.mock.On("ReopenContainerLog",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_ReopenContainerLog_Call) Run(run func(ctx context.Context, in *v1.ReopenContainerLogRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_ReopenContainerLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.ReopenContainerLogRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_ReopenContainerLog_Call) Return(reopenContainerLogResponse *v1.ReopenContainerLogResponse, err error) *MockRuntimeServiceClient_ReopenContainerLog_Call {
	_c.Call.Return(reopenContainerLogResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_ReopenContainerLog_Call) RunAndReturn(run func(ctx context.Context, in *v1.ReopenContainerLogRequest, opts ...grpc.CallOption) (*v1.ReopenContainerLogResponse, error)) *MockRuntimeServiceClient_ReopenContainerLog_Call {
	_c.Call.Return(run)
	return _c
}

// RunPodSandbox provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) RunPodSandbox(ctx context.Context, in *v1.RunPodSandboxRequest, opts ...grpc.CallOption) (*v1.RunPodSandboxResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunPodSandbox")
	}

	var r0 *v1.RunPodSandboxResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RunPodSandboxRequest, ...grpc.CallOption) (*v1.RunPodSandboxResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RunPodSandboxRequest, ...grpc.CallOption) *v1.RunPodSandboxResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RunPodSandboxResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RunPodSandboxRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_RunPodSandbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPodSandbox'
type MockRuntimeServiceClient_RunPodSandbox_Call struct {
	*mock.Call
}

// RunPodSandbox is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) RunPodSandbox(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_RunPodSandbox_Call {
	return &MockRuntimeServiceClient_RunPodSandbox_Call{Call: _e.mock.On("RunPodSandbox",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_RunPodSandbox_Call) Run(run func(ctx context.Context, in *v1.RunPodSandboxRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_RunPodSandbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.RunPodSandboxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_RunPodSandbox_Call) Return(runPodSandboxResponse *v1.RunPodSandboxResponse, err error) *MockRuntimeServiceClient_RunPodSandbox_Call {
	_c.Call.Return(runPodSandboxResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_RunPodSandbox_Call) RunAndReturn(run func(ctx context.Context, in *v1.RunPodSandboxRequest, opts ...grpc.CallOption) (*v1.RunPodSandboxResponse, error)) *MockRuntimeServiceClient_RunPodSandbox_Call {
	_c.Call.Return(run)
	return _c
}

// RuntimeConfig provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) RuntimeConfig(ctx context.Context, in *v1.RuntimeConfigRequest, opts ...grpc.CallOption) (*v1.RuntimeConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RuntimeConfig")
	}

	var r0 *v1.RuntimeConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RuntimeConfigRequest, ...grpc.CallOption) (*v1.RuntimeConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.RuntimeConfigRequest, ...grpc.CallOption) *v1.RuntimeConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RuntimeConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.RuntimeConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_RuntimeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RuntimeConfig'
type MockRuntimeServiceClient_RuntimeConfig_Call struct {
	*mock.Call
}

// RuntimeConfig is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) RuntimeConfig(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_RuntimeConfig_Call {
	return &MockRuntimeServiceClient_RuntimeConfig_Call{Call: _e.mock.On("RuntimeConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_RuntimeConfig_Call) Run(run func(ctx context.Context, in *v1.RuntimeConfigRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_RuntimeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.RuntimeConfigRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_RuntimeConfig_Call) Return(runtimeConfigResponse *v1.RuntimeConfigResponse, err error) *MockRuntimeServiceClient_RuntimeConfig_Call {
	_c.Call.Return(runtimeConfigResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_RuntimeConfig_Call) RunAndReturn(run func(ctx context.Context, in *v1.RuntimeConfigRequest, opts ...grpc.CallOption) (*v1.RuntimeConfigResponse, error)) *MockRuntimeServiceClient_RuntimeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// StartContainer provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) StartContainer(ctx context.Context, in *v1.StartContainerRequest, opts ...grpc.CallOption) (*v1.StartContainerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for StartContainer")
	}

	var r0 *v1.StartContainerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StartContainerRequest, ...grpc.CallOption) (*v1.StartContainerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StartContainerRequest, ...grpc.CallOption) *v1.StartContainerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.StartContainerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.StartContainerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_StartContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartContainer'
type MockRuntimeServiceClient_StartContainer_Call struct {
	*mock.Call
}

// StartContainer is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) StartContainer(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_StartContainer_Call {
	return &MockRuntimeServiceClient_StartContainer_Call{Call: _e.mock.On("StartContainer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_StartContainer_Call) Run(run func(ctx context.Context, in *v1.StartContainerRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_StartContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.StartContainerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_StartContainer_Call) Return(startContainerResponse *v1.StartContainerResponse, err error) *MockRuntimeServiceClient_StartContainer_Call {
	_c.Call.Return(startContainerResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_StartContainer_Call) RunAndReturn(run func(ctx context.Context, in *v1.StartContainerRequest, opts ...grpc.CallOption) (*v1.StartContainerResponse, error)) *MockRuntimeServiceClient_StartContainer_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) Status(ctx context.Context, in *v1.StatusRequest, opts ...grpc.CallOption) (*v1.StatusResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *v1.StatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StatusRequest, ...grpc.CallOption) (*v1.StatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StatusRequest, ...grpc.CallOption) *v1.StatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.StatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.StatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockRuntimeServiceClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) Status(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_Status_Call {
	return &MockRuntimeServiceClient_Status_Call{Call: _e.mock.On("Status",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_Status_Call) Run(run func(ctx context.Context, in *v1.StatusRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.StatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_Status_Call) Return(statusResponse *v1.StatusResponse, err error) *MockRuntimeServiceClient_Status_Call {
	_c.Call.Return(statusResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_Status_Call) RunAndReturn(run func(ctx context.Context, in *v1.StatusRequest, opts ...grpc.CallOption) (*v1.StatusResponse, error)) *MockRuntimeServiceClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// StopContainer provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) StopContainer(ctx context.Context, in *v1.StopContainerRequest, opts ...grpc.CallOption) (*v1.StopContainerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for StopContainer")
	}

	var r0 *v1.StopContainerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StopContainerRequest, ...grpc.CallOption) (*v1.StopContainerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StopContainerRequest, ...grpc.CallOption) *v1.StopContainerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.StopContainerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.StopContainerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_StopContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopContainer'
type MockRuntimeServiceClient_StopContainer_Call struct {
	*mock.Call
}

// StopContainer is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) StopContainer(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_StopContainer_Call {
	return &MockRuntimeServiceClient_StopContainer_Call{Call: _e.mock.On("StopContainer",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_StopContainer_Call) Run(run func(ctx context.Context, in *v1.StopContainerRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_StopContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.StopContainerRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_StopContainer_Call) Return(stopContainerResponse *v1.StopContainerResponse, err error) *MockRuntimeServiceClient_StopContainer_Call {
	_c.Call.Return(stopContainerResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_StopContainer_Call) RunAndReturn(run func(ctx context.Context, in *v1.StopContainerRequest, opts ...grpc.CallOption) (*v1.StopContainerResponse, error)) *MockRuntimeServiceClient_StopContainer_Call {
	_c.Call.Return(run)
	return _c
}

// StopPodSandbox provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) StopPodSandbox(ctx context.Context, in *v1.StopPodSandboxRequest, opts ...grpc.CallOption) (*v1.StopPodSandboxResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for StopPodSandbox")
	}

	var r0 *v1.StopPodSandboxResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StopPodSandboxRequest, ...grpc.CallOption) (*v1.StopPodSandboxResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.StopPodSandboxRequest, ...grpc.CallOption) *v1.StopPodSandboxResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.StopPodSandboxResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.StopPodSandboxRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_StopPodSandbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopPodSandbox'
type MockRuntimeServiceClient_StopPodSandbox_Call struct {
	*mock.Call
}

// StopPodSandbox is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) StopPodSandbox(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_StopPodSandbox_Call {
	return &MockRuntimeServiceClient_StopPodSandbox_Call{Call: _e.mock.On("StopPodSandbox",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_StopPodSandbox_Call) Run(run func(ctx context.Context, in *v1.StopPodSandboxRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_StopPodSandbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.StopPodSandboxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_StopPodSandbox_Call) Return(stopPodSandboxResponse *v1.StopPodSandboxResponse, err error) *MockRuntimeServiceClient_StopPodSandbox_Call {
	_c.Call.Return(stopPodSandboxResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_StopPodSandbox_Call) RunAndReturn(run func(ctx context.Context, in *v1.StopPodSandboxRequest, opts ...grpc.CallOption) (*v1.StopPodSandboxResponse, error)) *MockRuntimeServiceClient_StopPodSandbox_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContainerResources provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) UpdateContainerResources(ctx context.Context, in *v1.UpdateContainerResourcesRequest, opts ...grpc.CallOption) (*v1.UpdateContainerResourcesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerResources")
	}

	var r0 *v1.UpdateContainerResourcesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateContainerResourcesRequest, ...grpc.CallOption) (*v1.UpdateContainerResourcesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateContainerResourcesRequest, ...grpc.CallOption) *v1.UpdateContainerResourcesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateContainerResourcesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.UpdateContainerResourcesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_UpdateContainerResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContainerResources'
type MockRuntimeServiceClient_UpdateContainerResources_Call struct {
	*mock.Call
}

// UpdateContainerResources is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) UpdateContainerResources(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_UpdateContainerResources_Call {
	return &MockRuntimeServiceClient_UpdateContainerResources_Call{Call: _e.mock.On("UpdateContainerResources",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_UpdateContainerResources_Call) Run(run func(ctx context.Context, in *v1.UpdateContainerResourcesRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_UpdateContainerResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.UpdateContainerResourcesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_UpdateContainerResources_Call) Return(updateContainerResourcesResponse *v1.UpdateContainerResourcesResponse, err error) *MockRuntimeServiceClient_UpdateContainerResources_Call {
	_c.Call.Return(updateContainerResourcesResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_UpdateContainerResources_Call) RunAndReturn(run func(ctx context.Context, in *v1.UpdateContainerResourcesRequest, opts ...grpc.CallOption) (*v1.UpdateContainerResourcesResponse, error)) *MockRuntimeServiceClient_UpdateContainerResources_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRuntimeConfig provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) UpdateRuntimeConfig(ctx context.Context, in *v1.UpdateRuntimeConfigRequest, opts ...grpc.CallOption) (*v1.UpdateRuntimeConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateRuntimeConfig")
	}

	var r0 *v1.UpdateRuntimeConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateRuntimeConfigRequest, ...grpc.CallOption) (*v1.UpdateRuntimeConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateRuntimeConfigRequest, ...grpc.CallOption) *v1.UpdateRuntimeConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateRuntimeConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.UpdateRuntimeConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_UpdateRuntimeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRuntimeConfig'
type MockRuntimeServiceClient_UpdateRuntimeConfig_Call struct {
	*mock.Call
}

// UpdateRuntimeConfig is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) UpdateRuntimeConfig(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_UpdateRuntimeConfig_Call {
	return &MockRuntimeServiceClient_UpdateRuntimeConfig_Call{Call: _e.mock.On("UpdateRuntimeConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_UpdateRuntimeConfig_Call) Run(run func(ctx context.Context, in *v1.UpdateRuntimeConfigRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_UpdateRuntimeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.UpdateRuntimeConfigRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_UpdateRuntimeConfig_Call) Return(updateRuntimeConfigResponse *v1.UpdateRuntimeConfigResponse, err error) *MockRuntimeServiceClient_UpdateRuntimeConfig_Call {
	_c.Call.Return(updateRuntimeConfigResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_UpdateRuntimeConfig_Call) RunAndReturn(run func(ctx context.Context, in *v1.UpdateRuntimeConfigRequest, opts ...grpc.CallOption) (*v1.UpdateRuntimeConfigResponse, error)) *MockRuntimeServiceClient_UpdateRuntimeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockRuntimeServiceClient
func (_mock *MockRuntimeServiceClient) Version(ctx context.Context, in *v1.VersionRequest, opts ...grpc.CallOption) (*v1.VersionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *v1.VersionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.VersionRequest, ...grpc.CallOption) (*v1.VersionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.VersionRequest, ...grpc.CallOption) *v1.VersionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VersionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.VersionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRuntimeServiceClient_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockRuntimeServiceClient_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockRuntimeServiceClient_Expecter) Version(ctx interface{}, in interface{}, opts ...interface{}) *MockRuntimeServiceClient_Version_Call {
	return &MockRuntimeServiceClient_Version_Call{Call: _e.mock.On("Version",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRuntimeServiceClient_Version_Call) Run(run func(ctx context.Context, in *v1.VersionRequest, opts ...grpc.CallOption)) *MockRuntimeServiceClient_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*v1.VersionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeServiceClient_Version_Call) Return(versionResponse *v1.VersionResponse, err error) *MockRuntimeServiceClient_Version_Call {
	_c.Call.Return(versionResponse, err)
	return _c
}

func (_c *MockRuntimeServiceClient_Version_Call) RunAndReturn(run func(ctx context.Context, in *v1.VersionRequest, opts ...grpc.CallOption) (*v1.VersionResponse, error)) *MockRuntimeServiceClient_Version_Call {
	_c.Call.Return(run)
	return _c
}
